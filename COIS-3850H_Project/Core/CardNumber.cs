using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace COIS_3850H_Project.Core
{
    public class CardNumber
    {
        Random rnd = new Random();
        private int issNum = 7;
        private int random69;
        private int cardLength;
        private int accnum;

        //initialize array to be maximum needed size (16)
        //find end of array before adding check dig?


        //private int[] card = new int[16];
        private int[] card = new int[16];


        //Constructor for card int[]
        //predetermined values for issuer# and bank# in card[0-5]
        //6 - 9 random Account Number digits in card[6 - cardLength -1]
        //Check digit (of 9 for now) in card[cardlength-1] (last digit)
        public int[] Card
        {
            get
            {
                card[0] = issNum;
                card[1] = 5;
                card[2] = 5;
                card[3] = 5;
                card[4] = 5;
                card[5] = 5;

                for (int i = 6; i < CardLength - 2; i++)
                {
                    card[i] = AccNum;
                }

                //last digit = check digit(9)

                card[CardLength] = 9;
                return card;
            }
        }

        //Random number from 6 - 9 to determine number of random account number digits
        public int Random69
        {
            get
            {
                int random69 = rnd.Next(6, 9);
                return random69;
            }
        }

        //Card Length property
        //1 IssNum + 5 BankNum Digits + 1 Check Digit = 7 + random 6 - 9 accountNum digits
        public int CardLength
        {
            get { return Random69 + 7; }
        }

        //Constructor for random account number
        //generate and return random int from 0 - 10
        public int AccNum
        {
            get
            {
                int accnum = rnd.Next(10);
                return accnum;
            }
        }

    }
}
/*
//Code Written By Simon Desjardins
//Purpose of code: Perform the Luhn Algorithm Check on card numbers generated by Cardly
//Steps:
//Turn card number into an array
//Step 1: While loop that steps from second last number to every second number, multiplying them (2224 would become 4244)
//If the result of any multiplication in step 1 is a two digit number, add up the digits together to create a new number. Ex: 12 = 1 + 2 = 3
//Step 2: Add up all the numbers.
//Step 3: If the sum is divisible by 10, it is valid. If not, repeat the number generation.
namespace Luhn_Algorithm
{
    class Luhn_Algorithm
    {
        static void Main(string[] args)
            //All Console Writelines are purely for testing and showing functionality. They are not required and are to be removed.
        {
            long cardNum = 4520123625872367; //Placeholder number. Replace with generated card variable.

            int[] result = cardNum.ToString().Select(o => Convert.ToInt32(o) - 48).ToArray(); //Converts cardnum int into an array (requires Linq)
            for(int i=0; i< result.Length;i++)
            {
                Console.Write(result[i]);
            }
            Console.WriteLine(""); 

            //Step 1: While loop that steps from second last number to every second number, multiplying them (2224 would become 4244)


            int j = 14; //Index for parsing the array
            
            
            //The following while loop starts at the second last number (skipping the check digit) and multiplies very number by 2.
            //If the result of that multiplication results in a two digit number - it will then find the sum of the number's digits.
            while (j >= 0) 
            
            {
                result[j] = result[j] * 2;
                if (result[j] >= 10)
                {
                    result[j] = (result[j] % 10) + 1;
                    //This equation takes the leftover from the >10 number and adds 1, which gives us the digit sum. Example: 16%10 + 1 = 6 + 1 = 7
                }
                j = j - 2;
            }
            for (int i = 0; i < result.Length; i++)
            {
                Console.Write(result[i]);
            }

            //Step 2: Add up all the numbers.
            int digitSum = 0; //Variables used in calculating the sum of digits.
            j = 0; //Reset j index.
            while (j < result.Length)
            {
                digitSum = digitSum + result[j];
                j++;
            }
            Console.WriteLine("");
            Console.WriteLine(digitSum);

            //Step 3: If the sum is divisible by 10, it is valid. If not, repeat the number generation.

          
            /*
              while(true) {
                    Luhn Algorithm
                if(digitSum % 10 = 0){
                    Break
                }
             */
/*
        }
    }
} 