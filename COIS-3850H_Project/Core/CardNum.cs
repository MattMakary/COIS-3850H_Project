using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace COIS_3850H_Project.Core
{
    public class CardNum
    {
        int[] ccNum = new int[16];
        Random rnd2 = new Random();

        public CardNum(int RANDOM69)
        {
            CCNUM[0] = 7;
            CCNUM[1] = 5;
            CCNUM[2] = 5;
            CCNUM[3] = 5;
            CCNUM[4] = 5;
            CCNUM[5] = 5;

            for (int i = 6; i < RANDOM69 + 6; i++)
            {
                int accNum = rnd2.Next(10);
                CCNUM[i] = accNum;
            }

            //digit after random account numbers = 9 (placeholder check digit)
            CCNUM[6 + RANDOM69] = 9;
        }

        public int[] CCNUM
        {
            set { ccNum = value; }
            get { return ccNum; }
        }
    }
}
/*
//Code Written By Simon Desjardins
//Purpose of code: Perform the Luhn Algorithm Check on card numbers generated by Cardly
//Steps:
//Turn card number into an array
//Step 1: While loop that steps from second last number to every second number, multiplying them (2224 would become 4244)
//If the result of any multiplication in step 1 is a two digit number, add up the digits together to create a new number. Ex: 12 = 1 + 2 = 3
//Step 2: Add up all the numbers.
//Step 3: If the sum is divisible by 10, it is valid. If not, repeat the number generation.
namespace Luhn_Algorithm
{
    class Luhn_Algorithm
    {
        static void Main(string[] args)
            //All Console Writelines are purely for testing and showing functionality. They are not required and are to be removed.
        {
            long cardNum = 4520123625872367; //Placeholder number. Replace with generated card variable.

            int[] result = cardNum.ToString().Select(o => Convert.ToInt32(o) - 48).ToArray(); //Converts cardnum int into an array (requires Linq)
            for(int i=0; i< result.Length;i++)
            {
                Console.Write(result[i]);
            }
            Console.WriteLine(""); 

            //Step 1: While loop that steps from second last number to every second number, multiplying them (2224 would become 4244)


            int j = 14; //Index for parsing the array
            
            
            //The following while loop starts at the second last number (skipping the check digit) and multiplies very number by 2.
            //If the result of that multiplication results in a two digit number - it will then find the sum of the number's digits.
            while (j >= 0) 
            
            {
                result[j] = result[j] * 2;
                if (result[j] >= 10)
                {
                    result[j] = (result[j] % 10) + 1;
                    //This equation takes the leftover from the >10 number and adds 1, which gives us the digit sum. Example: 16%10 + 1 = 6 + 1 = 7
                }
                j = j - 2;
            }
            for (int i = 0; i < result.Length; i++)
            {
                Console.Write(result[i]);
            }

            //Step 2: Add up all the numbers.
            int digitSum = 0; //Variables used in calculating the sum of digits.
            j = 0; //Reset j index.
            while (j < result.Length)
            {
                digitSum = digitSum + result[j];
                j++;
            }
            Console.WriteLine("");
            Console.WriteLine(digitSum);

            //Step 3: If the sum is divisible by 10, it is valid. If not, repeat the number generation.

          
            /*
              while(true) {
                    Luhn Algorithm
                if(digitSum % 10 = 0){
                    Break
                }
             

        }
    }
} */